// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

// prisma/schema.prisma

model User {
  id                   Int                 @id @default(autoincrement())
  firstname            String?
  lastname             String?
  username             String              @unique
  email                String              @unique
  password             String
  salt                 String
  created_at           DateTime            @default(now())
  is_del_flg           String              @default("N")
  is_active_flg        String              @default("Y")
  transactions         Transaction[]
  permanent_cost_items PermanentCostItem[]
  goals_and_intentions GoalAndIntention[]
  monthly_summaries    MonthlySummary[]
  daily_spendings      DailySpending[]
  budget_periods       BudgetPeriod[]
}

model Category {
  id                   Int                 @id @default(autoincrement())
  name                 String
  is_active_flg        String              @default("N")
  permanent_cost_items PermanentCostItem[]
  daily_spendings      DailySpending[]
}

model BudgetPeriod {
  id                   Int                 @id @default(autoincrement())
  user_id              Int
  period_type          String // 'weekly' or 'monthly'
  start_date           DateTime
  end_date             DateTime
  disposal_amount      Float
  user                 User                @relation(fields: [user_id], references: [id])
  week_month_trackings WeekMonthTracking[]
}

model WeekMonthTracking {
  id            Int          @id @default(autoincrement())
  budget_id     Int
  week_number   Int
  month_name    String
  year          Int
  budget_period BudgetPeriod @relation(fields: [budget_id], references: [id])
}

model Transaction {
  id               Int      @id @default(autoincrement())
  user_id          Int
  amount           Float
  date             DateTime @default(now())
  description      String?
  type             String // e.g., income, expense
  is_recurring_flg String   @default("N")
  user             User     @relation(fields: [user_id], references: [id])
}

model PermanentCostItem {
  id                 Int            @id @default(autoincrement())
  user_id            Int
  category_id        Int
  item_name          String
  item_cost          Float
  date               DateTime       @default(now())
  user               User           @relation(fields: [user_id], references: [id])
  category           Category       @relation(fields: [category_id], references: [id])
  monthly_summary    MonthlySummary @relation(fields: [monthly_summary_id], references: [id])
  monthly_summary_id Int
}

model GoalAndIntention {
  id              Int      @id @default(autoincrement())
  user_id         Int
  date            DateTime @default(now())
  goal_type       String
  amount          Float
  description     String?
  additional_info Json?
  is_achieved_flg String   @default("N")
  user            User     @relation(fields: [user_id], references: [id])
}

model MonthlySummary {
  id                   Int                 @id @default(autoincrement())
  user_id              Int
  date                 DateTime            @default(now())
  income               Float
  total_expenses       Float?
  total_savings        Float?
  fixed_costs          Float
  disposable           Float
  user                 User                @relation(fields: [user_id], references: [id])
  description          String
  permanent_cost_items PermanentCostItem[]
}

model DailySpending {
  id          Int      @id @default(autoincrement())
  user_id     Int
  date        DateTime @default(now())
  day_of_week String
  category_id Int
  amount      Float
  description String?
  is_del_flg  String   @default("N")
  user        User     @relation(fields: [user_id], references: [id])
  category    Category @relation(fields: [category_id], references: [id])
}
